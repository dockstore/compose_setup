input {
  tcp {
    port => 5066
    codec => json
    type => staginglogs
  }
  tcp {
    port => 5055
    codec => json
    type => productionlogs
  }
  file {
    path => "/tmp/access_log"
    start_position => "beginning"
  }
}

# The regex's are placed in reverse order of swagger-ui because an endpoint can match 2 patterns. This lets the "longer" endpoint resolve first.
# For example: "/workflows/search" matches the "/workflows/{workflowId}" endpoint so the "/workflows/search" pattern is placed first so that it matches it first.


filter {
  grok {
    match => { "message" => "%{COMBINEDAPACHELOG} %{NUMBER:latency:int}" }
  }
  date {
    match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
  }
  grok {
    match => { "request" => "%{URIPATH:path}" }
    named_captures_only => false
  }

  translate {
    field => "path"
    destination => "generalizedPath"
    fallback => "%{[path]}"
    dictionary => {
"^/workflows/[^/]+/zip/[^/]+$" => "/workflows/{workflowId}/zip/{workflowVersionId}"
"^/workflows/[^/]+/workflowVersions$" => "/workflows/{workflowId}/workflowVersions"
"^/workflows/[^/]+/verify/[^/]+$" => "/workflows/{workflowId}/verify/{workflowVersionId}"
"^/workflows/[^/]+/users$" => "/workflows/{workflowId}/users"
"^/workflows/[^/]+/unstar$" => "/workflows/{workflowId}/unstar"
"^/workflows/[^/]+/tools/[^/]+$" => "/workflows/{workflowId}/tools/{workflowVersionId}"
"^/workflows/[^/]+/testParameterFiles$" => "/workflows/{workflowId}/testParameterFiles"
"^/workflows/[^/]+/starredUsers$" => "/workflows/{workflowId}/starredUsers"
"^/workflows/[^/]+/star$" => "/workflows/{workflowId}/star"
"^/workflows/[^/]+/secondaryDescriptors$" => "/workflows/{workflowId}/secondaryDescriptors"
"^/workflows/[^/]+/restub$" => "/workflows/{workflowId}/restub"
"^/workflows/[^/]+/resetVersionPaths$" => "/workflows/{workflowId}/resetVersionPaths"
"^/workflows/[^/]+/requestDOI/[^/]+$" => "/workflows/{workflowId}/requestDOI/{workflowVersionId}"
"^/workflows/[^/]+/refresh$" => "/workflows/{workflowId}/refresh"
"^/workflows/[^/]+/publish$" => "/workflows/{workflowId}/publish"
"^/workflows/[^/]+/primaryDescriptor$" => "/workflows/{workflowId}/primaryDescriptor"
"^/workflows/[^/]+/labels$" => "/workflows/{workflowId}/labels"
"^/workflows/[^/]+/descriptor/.*$" => "/workflows/{workflowId}/descriptor/{relative-path}"
"^/workflows/[^/]+/defaultVersion$" => "/workflows/{workflowId}/defaultVersion"
"^/workflows/[^/]+/dag/[^/]+$" => "/workflows/{workflowId}/dag/{workflowVersionId}"
"^/workflows/[^/]+$" => "/workflows/{workflowId}"
"^/workflows/[^/]+/registerCheckerWorkflow/[^/]+$" => "/workflows/{entryId}/registerCheckerWorkflow/{descriptorType}"
"^/workflows/[^/]+/aliases$" => "/workflows/{alias}/aliases"
"^/workflows/shared$" => "/workflows/shared"
"^/workflows/published/[^/]+$" => "/workflows/published/{workflowId}"
"^/workflows/published$" => "/workflows/published"
"^/workflows/path/[^/]+$" => "/workflows/path/{repository}"
"^/workflows/path/workflow/[^/]+/upsertVersion$" => "/workflows/path/workflow/{repository}/upsertVersion"
"^/workflows/path/workflow/[^/]+/published$" => "/workflows/path/workflow/{repository}/published"
"^/workflows/path/workflow/[^/]+/permissions$" => "/workflows/path/workflow/{repository}/permissions"
"^/workflows/path/workflow/[^/]+/actions$" => "/workflows/path/workflow/{repository}/actions"
"^/workflows/path/workflow/[^/]+$" => "/workflows/path/workflow/{repository}"
"^/workflows/path/service/upsertVersion$" => "/workflows/path/service/upsertVersion"
"^/workflows/path/service$" => "/workflows/path/service"
"^/workflows/path/entry/[^/]+/published$" => "/workflows/path/entry/{repository}/published"
"^/workflows/path/entry/[^/]+$" => "/workflows/path/entry/{repository}"
"^/workflows/organization/[^/]+/published$" => "/workflows/organization/{organization}/published"
"^/workflows/manualRegister$" => "/workflows/manualRegister"
"^/workflows/hostedEntry/[^/]+$" => "/workflows/hostedEntry/{entryId}"
"^/workflows/hostedEntry$" => "/workflows/hostedEntry"
"^/users/[^/]+/workflows/[^/]+/refresh$" => "/users/{userId}/workflows/{organization}/refresh"
"^/users/[^/]+/workflows/refresh$" => "/users/{userId}/workflows/refresh"
"^/users/[^/]+/workflows/published$" => "/users/{userId}/workflows/published"
"^/users/[^/]+/workflows$" => "/users/{userId}/workflows"
"^/users/[^/]+/tokens/quay.io$" => "/users/{userId}/tokens/quay.io"
"^/users/[^/]+/tokens/gitlab.com$" => "/users/{userId}/tokens/gitlab.com"
"^/users/[^/]+/tokens/github.com$" => "/users/{userId}/tokens/github.com"
"^/users/[^/]+/tokens/dockstore$" => "/users/{userId}/tokens/dockstore"
"^/users/[^/]+/tokens$" => "/users/{userId}/tokens"
"^/users/[^/]+/services$" => "/users/{userId}/services"
"^/users/[^/]+/containers/[^/]+/refresh$" => "/users/{userId}/containers/{organization}/refresh"
"^/users/[^/]+/containers/refresh$" => "/users/{userId}/containers/refresh"
"^/users/[^/]+/containers/published$" => "/users/{userId}/containers/published"
"^/users/[^/]+/containers$" => "/users/{userId}/containers"
"^/users/[^/]+$" => "/users/{userId}"
"^/users/username/[^/]+$" => "/users/username/{username}"
"^/users/user/[^/]+/limits$" => "/users/user/{userId}/limits"
"^/users/user/[^/]+$" => "/users/user/{userId}"
"^/users/user/updateUserMetadata$" => "/users/user/updateUserMetadata"
"^/users/user/memberships$" => "/users/user/memberships"
"^/users/user/extended$" => "/users/user/extended"
"^/users/user/changeUsername$" => "/users/user/changeUsername"
"^/users/user$" => "/users/user"
"^/users/updateUserMetadata$" => "/users/updateUserMetadata"
"^/users/starredWorkflows$" => "/users/starredWorkflows"
"^/users/starredTools$" => "/users/starredTools"
"^/users/starredOrganizations$" => "/users/starredOrganizations"
"^/users/services/[^/]+/sync$" => "/users/services/{organizationName}/sync"
"^/users/services/sync$" => "/users/services/sync"
"^/users/checkUser/[^/]+$" => "/users/checkUser/{username}"
"^/organizations/[^/]+/collections/[^/]+/name$" => "/organizations/{organizationName}/collections/{collectionName}/name"
"^/organizations/[^/]+/users/[^/]+$" => "/organizations/{organizationId}/users/{username}"
"^/organizations/[^/]+/user$" => "/organizations/{organizationId}/user"
"^/organizations/[^/]+/unstar$" => "/organizations/{organizationId}/unstar"
"^/organizations/[^/]+/starredUsers$" => "/organizations/{organizationId}/starredUsers"
"^/organizations/[^/]+/star$" => "/organizations/{organizationId}/star"
"^/organizations/[^/]+/request$" => "/organizations/{organizationId}/request"
"^/organizations/[^/]+/reject$" => "/organizations/{organizationId}/reject"
"^/organizations/[^/]+/members$" => "/organizations/{organizationId}/members"
"^/organizations/[^/]+/invitation$" => "/organizations/{organizationId}/invitation"
"^/organizations/[^/]+/events$" => "/organizations/{organizationId}/events"
"^/organizations/[^/]+/description$" => "/organizations/{organizationId}/description"
"^/organizations/[^/]+/collections/[^/]+/entry$" => "/organizations/{organizationId}/collections/{collectionId}/entry"
"^/organizations/[^/]+/collections/[^/]+/description$" => "/organizations/{organizationId}/collections/{collectionId}/description"
"^/organizations/[^/]+/collections/[^/]+$" => "/organizations/{organizationId}/collections/{collectionId}"
"^/organizations/[^/]+/collections$" => "/organizations/{organizationId}/collections"
"^/organizations/[^/]+/approve$" => "/organizations/{organizationId}/approve"
"^/organizations/[^/]+/aliases$" => "/organizations/{organizationId}/aliases"
"^/organizations/[^/]+$" => "/organizations/{organizationId}"
"^/organizations/[^/]+/aliases$" => "/organizations/{alias}/aliases"
"^/organizations/name/[^/]+$" => "/organizations/name/{name}"
"^/organizations/collections/[^/]+/aliases$" => "/organizations/collections/{collectionId}/aliases"
"^/organizations/collections/[^/]+/aliases$" => "/organizations/collections/{alias}/aliases"
"^/organizations/all$" => "/organizations/all"
"^/organizations$" => "/organizations"
"^/metadata/sourceControlList$" => "/metadata/sourceControlList"
"^/metadata/sitemap$" => "/metadata/sitemap"
"^/metadata/runner_dependencies$" => "/metadata/runner_dependencies"
"^/metadata/rss$" => "/metadata/rss"
"^/metadata/okHttpCachePerformance$" => "/metadata/okHttpCachePerformance"
"^/metadata/elasticSearch$" => "/metadata/elasticSearch"
"^/metadata/dockerRegistryList$" => "/metadata/dockerRegistryList"
"^/metadata/descriptorLanguageList$" => "/metadata/descriptorLanguageList"
"^/metadata/config.json$" => "/metadata/config.json"
"^/entries/[^/]+/topic$" => "/entries/{id}/topic"
"^/entries/[^/]+/collections$" => "/entries/{id}/collections"
"^/entries/[^/]+/aliases$" => "/entries/{id}/aliases"
"^/containers/[^/]+/zip/[^/]+$" => "/containers/{toolId}/zip/{tagId}"
"^/containers/[^/]+/defaultVersion$" => "/containers/{toolId}/defaultVersion"
"^/containers/[^/]+/verify/[^/]+$" => "/containers/{containerId}/verify/{tagId}"
"^/containers/[^/]+/users$" => "/containers/{containerId}/users"
"^/containers/[^/]+/updateTagPaths$" => "/containers/{containerId}/updateTagPaths"
"^/containers/[^/]+/unstar$" => "/containers/{containerId}/unstar"
"^/containers/[^/]+/testParameterFiles$" => "/containers/{containerId}/testParameterFiles"
"^/containers/[^/]+/tags/[^/]+$" => "/containers/{containerId}/tags/{tagId}"
"^/containers/[^/]+/tags$" => "/containers/{containerId}/tags"
"^/containers/[^/]+/starredUsers$" => "/containers/{containerId}/starredUsers"
"^/containers/[^/]+/star$" => "/containers/{containerId}/star"
"^/containers/[^/]+/secondaryDescriptors$" => "/containers/{containerId}/secondaryDescriptors"
"^/containers/[^/]+/requestDOI/[^/]+$" => "/containers/{containerId}/requestDOI/{tagId}"
"^/containers/[^/]+/refresh$" => "/containers/{containerId}/refresh"
"^/containers/[^/]+/publish$" => "/containers/{containerId}/publish"
"^/containers/[^/]+/primaryDescriptor$" => "/containers/{containerId}/primaryDescriptor"
"^/containers/[^/]+/labels$" => "/containers/{containerId}/labels"
"^/containers/[^/]+/dockerfile$" => "/containers/{containerId}/dockerfile"
"^/containers/[^/]+/descriptor/.*$" => "/containers/{containerId}/descriptor/{relative-path}"
"^/containers/[^/]+$" => "/containers/{containerId}"
"^/containers/[^/]+/aliases$" => "/containers/{alias}/aliases"
"^/containers/schema/[^/]+/published$" => "/containers/schema/{containerId}/published"
"^/containers/registerManual$" => "/containers/registerManual"
"^/containers/published/[^/]+$" => "/containers/published/{containerId}"
"^/containers/published$" => "/containers/published"
"^/containers/path/[^/]+/published$" => "/containers/path/{repository}/published"
"^/containers/path/[^/]+$" => "/containers/path/{repository}"
"^/containers/path/[^/]+/tags$" => "/containers/path/{containerId}/tags"
"^/containers/path/tool/[^/]+/published$" => "/containers/path/tool/{repository}/published"
"^/containers/path/tool/[^/]+$" => "/containers/path/tool/{repository}"
"^/containers/namespace/[^/]+/published$" => "/containers/namespace/{namespace}/published"
"^/containers/hostedEntry/[^/]+$" => "/containers/hostedEntry/{entryId}"
"^/containers/hostedEntry$" => "/containers/hostedEntry"
"^/containers/dockerRegistryList$" => "/containers/dockerRegistryList"
"^/auth/tokens/[^/]+$" => "/auth/tokens/{tokenId}"
"^/auth/tokens/zenodo.org$" => "/auth/tokens/zenodo.org"
"^/auth/tokens/quay.io$" => "/auth/tokens/quay.io"
"^/auth/tokens/google$" => "/auth/tokens/google"
"^/auth/tokens/gitlab.com$" => "/auth/tokens/gitlab.com"
"^/auth/tokens/github.com$" => "/auth/tokens/github.com"
"^/auth/tokens/github$" => "/auth/tokens/github"
"^/auth/tokens/bitbucket.org$" => "/auth/tokens/bitbucket.org"
"^/api/ga4gh/v2/tools/[^/]+/versions/[^/]+/[^/]+/tests$" => "/api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/tests"
"^/api/ga4gh/v2/tools/[^/]+/versions/[^/]+/[^/]+/files$" => "/api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/files"
"^/api/ga4gh/v2/tools/[^/]+/versions/[^/]+/[^/]+/descriptor/.*$" => "/api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}"
"^/api/ga4gh/v2/tools/[^/]+/versions/[^/]+/[^/]+/descriptor$" => "/api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/descriptor"
"^/api/ga4gh/v2/tools/[^/]+/versions/[^/]+/containerfile$" => "/api/ga4gh/v2/tools/{id}/versions/{version_id}/containerfile"
"^/api/ga4gh/v2/tools/[^/]+/versions/[^/]+$" => "/api/ga4gh/v2/tools/{id}/versions/{version_id}"
"^/api/ga4gh/v2/tools/[^/]+/versions$" => "/api/ga4gh/v2/tools/{id}/versions"
"^/api/ga4gh/v2/tools/[^/]+$" => "/api/ga4gh/v2/tools/{id}"
"^/api/ga4gh/v2/tools$" => "/api/ga4gh/v2/tools"
"^/api/ga4gh/v2/toolClasses$" => "/api/ga4gh/v2/toolClasses"
"^/api/ga4gh/v2/metadata$" => "/api/ga4gh/v2/metadata"
"^/api/ga4gh/v2/extended/[^/]+/versions/[^/]+/[^/]+/tests/[^/]+$" => "/api/ga4gh/v2/extended/{id}/versions/{version_id}/{type}/tests/{relative_path}"
"^/api/ga4gh/v2/extended/workflows/[^/]+$" => "/api/ga4gh/v2/extended/workflows/{organization}"
"^/api/ga4gh/v2/extended/tools/[^/]+$" => "/api/ga4gh/v2/extended/tools/{organization}"
"^/api/ga4gh/v2/extended/tools/index$" => "/api/ga4gh/v2/extended/tools/index"
"^/api/ga4gh/v2/extended/tools/entry/_search$" => "/api/ga4gh/v2/extended/tools/entry/_search"
"^/api/ga4gh/v2/extended/organizations$" => "/api/ga4gh/v2/extended/organizations"
"^/api/ga4gh/v2/extended/containers/[^/]+$" => "/api/ga4gh/v2/extended/containers/{organization}"
"^/api/ga4gh/v1/tools/[^/]+/versions/[^/]+/[^/]+/tests$" => "/api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/tests"
"^/api/ga4gh/v1/tools/[^/]+/versions/[^/]+/[^/]+/descriptor/.*$" => "/api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}"
"^/api/ga4gh/v1/tools/[^/]+/versions/[^/]+/[^/]+/descriptor$" => "/api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor"
"^/api/ga4gh/v1/tools/[^/]+/versions/[^/]+/dockerfile$" => "/api/ga4gh/v1/tools/{id}/versions/{version_id}/dockerfile"
"^/api/ga4gh/v1/tools/[^/]+/versions/[^/]+$" => "/api/ga4gh/v1/tools/{id}/versions/{version_id}"
"^/api/ga4gh/v1/tools/[^/]+/versions$" => "/api/ga4gh/v1/tools/{id}/versions"
"^/api/ga4gh/v1/tools/[^/]+$" => "/api/ga4gh/v1/tools/{id}"
"^/api/ga4gh/v1/tools$" => "/api/ga4gh/v1/tools"
"^/api/ga4gh/v1/tool-classes$" => "/api/ga4gh/v1/tool-classes"
"^/api/ga4gh/v1/metadata$" => "/api/ga4gh/v1/metadata"
    }
    exact => true
    regex => true
  }
}


output {
  if [type]=="staginglogs" {
    elasticsearch { 
      hosts => ["elasticsearch-logstash:9200"] 
      index => "staging-logstash-%{+YYYY.MM.dd}"
    }
  } else {
    elasticsearch {
      hosts => ["elasticsearch-logstash:9200"]
    }
  }
  stdout { codec => rubydebug }
}
