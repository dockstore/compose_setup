input {
  tcp {
    port => 5055
    codec => json
  }
  file {
    path => "/tmp/access_log"
    start_position => "beginning"
  }
}


filter {
  grok {
    match => { "message" => "%{COMBINEDAPACHELOG}" }
  }
  date {
    match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
  }
  grok {
    match => { "request" => "%{URIPATH:path}" }
    named_captures_only => false
  }

  translate {
    field => "path"
    destination => "generalizedPath"
    dictionary => {
      "^/containers/[^/]+/refresh$" => "/containers/{containerId}/refresh"
      "^/containers/[^/]+$" => "/containers/{containerId}"
      "^/containers/[^/]+/publish$" => "/containers/{containerId}/publish"
      "^/containers/[^/]+/users$" => "/containers/{containerId}/users"
      "^/containers/[^/]+/starredUsers$" => "/containers/{containerId}/starredUsers"
      "^/containers/[^/]+/wdl$" => "/containers/{containerId}/wdl"
      "^/containers/[^/]+/cwl$" => "/containers/{containerId}/cwl"
      "^/containers/refresh$" => "/containers/refresh"
      "^/containers$" => "/containers"
      "^/containers/[^/]+/labels$" => "/containers/{containerId}/labels"
      "^/containers/[^/]+/updateTagPaths$" => "/containers/{containerId}/updateTagPaths"
      "^/containers/published/[^/]+$" => "/containers/published/{containerId}"
      "^/containers/namespace/[^/]+/published$" => "/containers/namespace/{namespace}/published"
      "^/containers/schema/[^/]+/published$" => "/containers/schema/{containerid}"
      "^/containers/registerManual$" => "/containers/registerManual"
      "^/containers/published$" => "/containers/published"
      "^/containers/path/[^/]+published$" => "/containers/path/{repository}/published"
      "^/containers/path/[^/]+$" => "/containers/path/{repository}"
      "^/containers/path/tool/[^/]+$" => "/containers/path/tool/{repository}"
      "^/containers/path/tool/[^/]+/published$" => "/containers/path/tool/{repository}/published}"
      "^/containers/[^/]+/dockerfile$" => "/containers/{containerId}/dockerfile"
      "^/containers/[^/]+/verifiedSources$" => "/containers/{containerId}/verifiedSources"
      "^/containers/[^/]+/cwl/[^/]+$" => "/containers/{containerId}/cwl/{relative-path}"
      "^/containers/[^/]+/wdl/[^/]+$" => "/containers/{containerId}/wdl/{relative-path}"
      "^/containers/[^/]+/secondaryCwl$" => "/containers/{containerId}/secondaryCwl"
      "^/containers/[^/]+/secondaryWdl$" => "/containers/{containerId}/secondaryWdl"
      "^/containers/[^/]+/testParameterFiles$" => "/containers/{containerId}/testParameterFiles"
      "^/containers/dockerRegistryList$" => "/containers/dockerRegistryList"
      "^/containers/[^/]+/star$" => "/containers/{containerId}/star"
      "^/containers/[^/]+/unstar$" => "/containers/{containerId}/unstar"
      "^/containers/search$" => "/containers/search"
    }
    exact => true
    regex => true
  }
}


output {
  elasticsearch { hosts => ["elasticsearch:9200"] }
  stdout { codec => rubydebug }
}
