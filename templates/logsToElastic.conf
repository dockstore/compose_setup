input {
  tcp {
    port => 5055
    codec => json
  }
  file {
    path => "/tmp/access_log"
    start_position => "beginning"
  }
}


filter {
  grok {
    match => { "message" => "%{COMBINEDAPACHELOG}" }
  }
  date {
    match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
  }
  grok {
    match => { "request" => "%{URIPATH:path}" }
    named_captures_only => false
  }

  translate {
    field => "path"
    destination => "generalizedPath"
    dictionary => {
      "^/containers/path/[^/]+/tags$" => "/containers/path/{containerId}/tags"
      "^/containers/[^/]+/verify/[^/]+$" => "/containers/{containerId}/verify/{tagId}"
      "^/containers/[^/]+/tags/[^/]+$" => "/containers/{containerId}/tags/{tagId}"
      "^/containers/[^/]+/tags$" => "/containers/{containerId}/tags"
      "^/containers/[^/]+/requestDOI/[^/]+$" => "/containers/{containerId}/requestDOI/{tagId}"

      "^/containers/search$" => "/containers/search"
      "^/containers/schema/[^/]+/published$" => "/containers/schema/{containerid}/published"
      "^/containers/registerManual$" => "/containers/registerManual"
      "^/containers/refresh$" => "/containers/refresh"
      "^/containers/published/[^/]+$" => "/containers/published/{containerId}"
      "^/containers/published$" => "/containers/published"
      "^/containers/path/tool/[^/]+/published$" => "/containers/path/tool/{repository}/published}"
      "^/containers/path/tool/[^/]+$" => "/containers/path/tool/{repository}"
      "^/containers/path/[^/]+published$" => "/containers/path/{repository}/published"
      "^/containers/path/[^/]+$" => "/containers/path/{repository}"
      "^/containers/namespace/[^/]+/published$" => "/containers/namespace/{namespace}/published"
      "^/containers/dockerRegistryList$" => "/containers/dockerRegistryList"
      "^/containers/[^/]+/wdl/[^/]+$" => "/containers/{containerId}/wdl/{relative-path}"
      "^/containers/[^/]+/wdl$" => "/containers/{containerId}/wdl"
      "^/containers/[^/]+/verifiedSources$" => "/containers/{containerId}/verifiedSources"
     "^/containers/[^/]+/users$" => "/containers/{containerId}/users"
      "^/containers/[^/]+/updateTagPaths$" => "/containers/{containerId}/updateTagPaths"
      "^/containers/[^/]+/unstar$" => "/containers/{containerId}/unstar"
      "^/containers/[^/]+/testParameterFiles$" => "/containers/{containerId}/testParameterFiles"
      "^/containers/[^/]+/starredUsers$" => "/containers/{containerId}/starredUsers"
      "^/containers/[^/]+/star$" => "/containers/{containerId}/star"
      "^/containers/[^/]+/secondaryWdl$" => "/containers/{containerId}/secondaryWdl"
      "^/containers/[^/]+/secondaryCwl$" => "/containers/{containerId}/secondaryCwl"
      "^/containers/[^/]+/refresh$" => "/containers/{containerId}/refresh"
      "^/containers/[^/]+/publish$" => "/containers/{containerId}/publish"
      "^/containers/[^/]+/labels$" => "/containers/{containerId}/labels"
      "^/containers/[^/]+/dockerfile$" => "/containers/{containerId}/dockerfile"
      "^/containers/[^/]+/cwl/[^/]+$" => "/containers/{containerId}/cwl/{relative-path}" 
      "^/containers/[^/]+/cwl$" => "/containers/{containerId}/cwl"
      "^/containers/[^/]+$" => "/containers/{containerId}"
      "^/containers$" => "/containers"

      "^/api/ga4gh/v1/tools/versions/[^/]+/dockerfile$" => "/api/ga4gh/v1/tools/versions/{version_id}/dockerfile"
      "^/api/ga4gh/v1/tools/versions/[^/]+/[^/]+/tests$" => "/api/ga4gh/v1/tools/versions/{version_id}/{type}/tests"
      "^/api/ga4gh/v1/tools/versions/[^/]+/[^/]+/descriptor/.*$" => "/api/ga4gh/v1/tools/versions/{version_id}/{type}/descriptor/{relative_path}"
      "^/api/ga4gh/v1/tools/versions/[^/]+/[^/]+/descriptor$" => "/api/ga4gh/v1/tools/versions/{version_id}/{type}/descriptor"
      "^/api/ga4gh/v1/tools/versions/[^/]+$" => "/api/ga4gh/v1/tools/versions/{version_id}"
      "^/api/ga4gh/v1/tools/versions$" => "/api/ga4gh/v1/tools/versions"
      "^/api/ga4gh/v1/tools/[^/]+$" => "/api/ga4gh/v1/tools/{id}"
      "^/api/ga4gh/v1/tools$" => "/api/ga4gh/v1/tools"
      "^/api/ga4gh/v1/tool-classes$" => "/api/ga4gh/v1/tool-classes"
      "^/api/ga4gh/v1/metadata$" => "/api/ga4gh/v1/metadata"

      "^/api/ga4gh/v2/tools/versions/[^/]+/containerfile$" => "/api/ga4gh/v2/tools/versions/{version_id}/containerfile"
      "^/api/ga4gh/v2/tools/versions/[^/]+/[^/]+/tests$" => "/api/ga4gh/v2/tools/versions/{version_id}/{type}/tests"
      "^/api/ga4gh/v2/tools/versions/[^/]+/[^/]+/files$" => "/api/ga4gh/v2/tools/versions/{version_id}/{type}/files"
      "^/api/ga4gh/v2/tools/versions/[^/]+/[^/]+/descriptor/.*$" => "/api/ga4gh/v2/tools/versions/{version_id}/{type}/descriptor/{relative_path}"
      "^/api/ga4gh/v2/tools/versions/[^/]+/[^/]+/descriptor$" => "/api/ga4gh/v2/tools/versions/{version_id}/{type}/descriptor"
      "^/api/ga4gh/v2/tools/versions/[^/]+$" => "/api/ga4gh/v2/tools/versions/{version_id}"
      "^/api/ga4gh/v2/tools/versions$" => "/api/ga4gh/v2/tools/versions"
      "^/api/ga4gh/v2/tools/[^/]+$" => "/api/ga4gh/v2/tools/{id}"
      "^/api/ga4gh/v2/tools$" => "/api/ga4gh/v2/tools"
      "^/api/ga4gh/v2/toolClasses$" => "/api/ga4gh/v2/toolClasses"
      "^/api/ga4gh/v2/metadata$" => "/api/ga4gh/v2/metadata"

      "^/api/ga4gh/v2/extended/workflows/[^/]+$" => "/api/ga4gh/v2/extended/workflows/{organization}"
      "^/api/ga4gh/v2/extended/tools/index$" => "/api/ga4gh/v2/extended/tools/index"
      "^/api/ga4gh/v2/extended/tools/entry/_search$" => "/api/ga4gh/v2/extended/tools/entry/_search"
      "^/api/ga4gh/v2/extended/containers/[^/]+$" => "/api/ga4gh/v2/extended/containers/{organization}"
      "^/api/ga4gh/v2/extended/organizations$" => "/api/ga4gh/v2/extended/tools/organizations"
      "^/api/ga4gh/v2/extended/tools/[^/]+$" => "/api/ga4gh/v2/extended/tools/{organization}"


      "^/workflows/search$" => "/workflows/search"
      "^/workflows/published/[^/]+$" => "/workflows/published/{workflowId}"
      "^/workflows/published$" => "/workflows/published"
      "^/workflows/path/workflow/[^/]+/published$" => "/workflows/path/workflow/{repository}/published"
      "^/workflows/path/workflow/[^/]+$" => "/workflows/path/workflow/{repository}"
      "^/workflows/path/entry/[^/]+/published$" => "/workflows/path/entry/{repository}/published"
      "^/workflows/path/entry/[^/]+$" => "/workflows/path/entry/{repository}"
      "^/workflows/path/[^/]+$" => "/workflows/path/{repository}"
      "^/workflows/organization/[^/]+/published$" => "/workflows/organization/{organization}/published"
      "^/workflows/manualRegister$" => "/workflows/manualRegister"
      "^/workflows/[^/]+/workflowVersions$" => "/workflows/{workflowId}/workflowVersions"
      "^/workflows/[^/]+/wdl/[^/]+$" => "/workflows/{workflowId}/wdl/{relative-path}"
      "^/workflows/[^/]+/wdl$" => "/workflows/{workflowId}/wdl"
      "^/workflows/[^/]+/verify/[^/]+$" => "/workflows/{workflowId}/verify/{workflowVersionId}"
      "^/workflows/[^/]+/verifiedSources$" => "/workflows/{workflowId}/verifiedSources"
      "^/workflows/[^/]+/users$" => "/workflows/{workflowId}/users"
      "^/workflows/[^/]+/unstar$" => "/workflows/{workflowId}/unstar"
      "^/workflows/[^/]+/tools/[^/]+$" => "/workflows/{workflowId}/tools/{workflowVersionId}"
      "^/workflows/[^/]+/testParameterFiles$" => "/workflows/{workflowId}/testParameterFiles"
      "^/workflows/[^/]+/starredUsers$" => "/workflows/{workflowId}/starredUsers"
      "^/workflows/[^/]+/star$" => "/workflows/{workflowId}/star"
      "^/workflows/[^/]+/secondaryWdl$" => "/workflows/{workflowId}/secondaryWdl"
      "^/workflows/[^/]+/secondaryNextflow$" => "/workflows/{workflowId}/secondaryNextflow"
      "^/workflows/[^/]+/secondaryCwl$" => "/workflows/{workflowId}/secondaryCwl"
      "^/workflows/[^/]+/restub$" => "/workflows/{workflowId}/restub"
      "^/workflows/[^/]+/resetVersionPaths$" => "/workflows/{workflowId}/resetVersionPaths"
      "^/workflows/[^/]+/requestDOI/[^/]+$" => "/workflows/{workflowId}/requestDOI/{workflowVersionId}"
      "^/workflows/[^/]+/refresh$" => "/workflows/{workflowId}/refresh"
      "^/workflows/[^/]+/publish$" => "/workflows/{workflowId}/publish"
      "^/workflows/[^/]+/nextflow/[^/]+$" => "/workflows/{workflowId}/nextlfow/{relative-path}"
      "^/workflows/[^/]+/nextflow$" => "/workflows/{workflowId}/nextflow"
      "^/workflows/[^/]+$/labels" => "/workflows/{workflowId}/labels"
      "^/workflows/[^/]+/dag/[^/]+$" => "/workflows/{workflowId}/dag/{workflowVersionId}"
      "^/workflows/[^/]+/cwl/[^/]+$" => "/workflows/{workflowId}/cwl/{relative-path}"
      "^/workflows/[^/]+/cwl$" => "/workflows/{workflowId}/cwl"
      "^/workflows/[^/]+$" => "/workflows/{workflowId}"
      "^/workflows/[^/]+/registerCheckerWorkflow/[^/]+$" => "/workflows/{entryId}/registerCheckerWorkflow/{descriptorType}"
      "^/workflows$" => "/workflows"

      "^/users/username/[^/]+$" => "/users/username/{username}"
      "^/users/user/updateUserMetadata$" => "/users/user/updateUserMetadata"
      "^/users/user$" => "/users/user"
      "^/users/updateUserMetadata$" => "/users/updateUserMetadata"
      "^/users/starredWorkflows$" => "/users/starredWorkflows"
      "^/users/starredTools$" => "/users/starredTools"
      "^/users/groups/[^/]+/users$" => "/users/groups/{groupId}/users"
      "^/users/groups/[^/]+$" => "/users/groups/{groupId}"
      "^/users/groups$" => "/users/groups"
      "^/users/[^/]+/workflows/refresh$" => "/users/{userId}/workflows/refresh"
      "^/users/[^/]+/workflows/published$" => "/users/{userId}/workflows/published"
      "^/users/[^/]+/workflows/[^/]+/refresh$" => "/users/{userId}/workflows/{organization}/refresh"
      "^/users/[^/]+/workflows$" => "/users/{userId}/workflows"
      "^/users/[^/]+/tokens/dockstore$" => "/users/{userId}/tokens/dockstore"
      "^/users/[^/]+/tokens/github.com$" => "/users/{userId}/tokens/github.com"
      "^/users/[^/]+/tokens/gitlab.com$" => "/users/{userId}/tokens/gitlab.com"
      "^/users/[^/]+/tokens/quay.io$" => "/users/{userId}/tokens/quay.io"
      "^/users/[^/]+/tokens$" => "/users/{userId}/tokens"
      "^/users/[^/]+/groups/[^/]+$" => "/users/{userId}/groups/{groupId}"
      "^/users/[^/]+/groups$" => "/users/{userId}/groups"
      "^/users/[^/]+/containers/refresh$" => "/users/{userId}/containers/refresh"
      "^/users/[^/]+/containers/published$" => "/users/{userId}/containers/published"
      "^/users/[^/]+/containers/[^/]/refresh$" => "/users/{userId}/containers/{organization}/refresh"
      "^/users/[^/]+/containers$" => "/users/{userId}/containers"
      "^/users/[^/]+$" => "/users/{userId}"
      "^/users$" => "/users"

      "^/metadata/descriptorLanguageList$" => "/metadata/descriptorLanguageList"
      "^/metadata/dockerRegistryList$" => "/metadata/dockerRegistryList"
      "^/metadata/okHttpCachePerformance$" => "/metadata/okHttpCachePerformance"
      "^/metadata/rss$" => "/metadata/rss"
      "^/metadata/runner_dependencies$" => "/metadata/runner_dependencies"
      "^/metadata/sitemap$" => "/metadata/sitemap"
      "^/metadata/sourceControlList$" => "/metadata/sourceControlList"
    }
    exact => true
    regex => true
  }
}


output {
  elasticsearch { hosts => ["elasticsearch:9200"] }
  stdout { codec => rubydebug }
}
