# Expires map
map $sent_http_content_type $expires {
    default                    off;
    text/html                  epoch;
    text/css                   86400;
    application/javascript     86400;
    application/octet-stream   604800;
    ~image/                    604800;
}

# https://aws.amazon.com/premiumsupport/knowledge-center/elb-capture-client-ip-addresses/
log_format  custom  '$http_x_forwarded_for - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" $remote_addr $upstream_response_time';
# workaround for the way we're including conf https://serverfault.com/questions/729128/overriding-nginx-access-log-directive-duplicate-log-entries
access_log  off;

# Don't send nginx version number
server_tokens off;

# Don't allow page to be rendered inside a frame or iframe
add_header X-Frame-Options DENY;

# Enable cross-site scripting filter (XSS)
# (handled by the browser; usually enabled by default,
# this header will re-enable the filter if disabled by user.)
add_header X-XSS-Protection "1; mode=block";


# nginx caches ips on startup, so doesn't survive webservice restarts
# https://www.nginx.com/blog/dns-service-discovery-nginx-plus/
# https://stackoverflow.com/questions/46660436/nginx-does-not-automatically-pick-up-dns-changes-in-swarm/46664433#46664433
resolver 127.0.0.11 valid=10s;

server {
    set $webservice "webservice";
    server_name  default_server;
    include /etc/nginx/conf.d/default.nginx_http.shared.conf;
    access_log  /var/log/nginx/access.log  custom;
    # listen       4200 http2;
    # http2 not working over http for me
    listen       4200;

    ##
    # `gzip` Settings
    # https://www.digitalocean.com/community/tutorials/how-to-add-the-gzip-module-to-nginx-on-ubuntu-14-04
    #
    gzip on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon application/javascript;

    expires $expires;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # used to redirect swagger.json as retrieved by swagger ui without changes
    location = /swagger.json {
        rewrite ^/(.*)$ http{{#HTTPS}}s{{/HTTPS}}://{{ DOMAIN_NAME}}/api/swagger.json permanent;
    }
    
    # used to redirect swagger.json as retrieved by swagger ui without changes
    location = /openapi.yaml {
        #proxy_pass 	http://webservice:8080/openapi.yaml;
        rewrite ^/(.*)$ http{{#HTTPS}}s{{/HTTPS}}://{{ DOMAIN_NAME}}/api/openapi.yaml permanent;
    }

    # used when port 8443 was unreachable from google
    location = /sitemap.txt {
        proxy_pass     http://$webservice:8080/metadata/sitemap;
    }

    location = /rss.xml {
        proxy_pass     http://$webservice:8080/metadata/rss;
    }

    location /static {
        proxy_pass     http://$webservice:8080/static;
    }

    location /api/ {
        rewrite ^ $request_uri;
        rewrite ^/api/(.*) $1 break;
        return 400;
        proxy_pass     http://$webservice:8080/$uri;
    }

    location /robots.txt {
        root   /usr/share/nginx/html2;
        rewrite ^ /robots.txt break;
    }

    location / {
        root   /usr/share/nginx/html2;
        index  index.html index.htm;
        try_files $uri $uri/ /index.html =404;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html2;
    }
}

# Port 8443
server {
    set $webservice "webservice";
    server_name  default_server;
    include /etc/nginx/conf.d/default.nginx_http.shared.conf;
    access_log  /var/log/nginx/access.log  custom;
    listen 8080;

    location /static {
        rewrite ^/(.*)$ https://$hostname/$1 permanent;
        proxy_pass     http://$webservice:8080/static;
    }

    location / {
        proxy_pass     http://$webservice:8080;
    }
}
