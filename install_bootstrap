#!/usr/bin/env bash

# Created by Solomon Shorser
# Hacked by Denis Yuen

set -o errexit
set -o pipefail
set -o nounset


# When changing these versions, you will probably need to delete all files in the working directory
# except for the dockstore_launcher_config directory in order to get a clean new copy of
# the Docker compose templates

cat <<MSG
DOCKSTORE INSTALLATION BOOTSTRAPPER
-----------------------------------------------------------------------------
MSG

run_dockstore_launcher=''
PUBLIC_LAUNCHER_IP_ADDRESS=''
PRODUCTION=''
DOCKSTORE_VERSION=''
DOCKSTORE_UI2_VERSION=''
GITHUB_CLIENT2_ID=''
GITHUB_CLIENT2_SECRET=''
QUAY_CLIENT_ID=''
QUAY_CLIENT_SECRET=''
BITBUCKET_CLIENT_ID=''
BITBUCKET_CLIENT_SECRET=''
EXTERNAL_DOMAIN_NAME=''
DOMAIN_NAME=''
HTTPS=''
DISCOURSE_URL=''
DISCOURSE_KEY=''
DISCOURSE_CATEGORY_ID=''
GITHUB_APP_PRIVATE_KEY_FILE=''
GITHUB_APP_ID=''
GITHUB_APP_NAME=''
TAG_MANAGER_ID=''
GITLAB_CLIENT_ID=''
GITLAB_CLIENT_SECRET=''
GOOGLE_CLIENT_ID=''
GOOGLE_CLIENT_SECRET=''
LOGSTASH=''
LOGSTASH_HOST=''
TERRA_IMPORT_URL=''
AUTHORIZER_TYPE=''
EXTERNAL_GOOGLE_CLIENT_PREFIX1=''
SAM_PATH=''
DATABASE_GENERATED=''
SLACK_URL=''
TOOLTESTER_BUCKET_NAME=''
ZENODO_CLIENT_ID=''
ZENODO_CLIENT_SECRET=''
ZENODO_URL=''

function template()
{
    mkdir -p config
    mustache dockstore_launcher_config/compose.config templates/Dockerfile_webservice.template > config/Dockerfile_webservice
    mustache dockstore_launcher_config/compose.config templates/Dockerfile_ui2.template > config/Dockerfile_ui2
    mustache dockstore_launcher_config/compose.config templates/web.yml.template > config/web.yml
    mustache dockstore_launcher_config/compose.config templates/default.nginx_http.conf.template > config/default.nginx_http.conf
    mustache dockstore_launcher_config/compose.config templates/default.nginx_https.conf.template > config/default.nginx_https.conf
    mustache dockstore_launcher_config/compose.config templates/default.nginx_https.shared.conf.template > config/default.nginx_https.shared.conf

    mustache dockstore_launcher_config/compose.config templates/init_webservice.sh.template > config/init_webservice.sh
    mustache dockstore_launcher_config/compose.config templates/init_migration.sh.template > config/init_migration.sh
    mustache dockstore_launcher_config/compose.config templates/elasticsearch.yml > config/elasticsearch.yml
    mustache dockstore_launcher_config/compose.config templates/metricbeat.yml > config/metricbeat.yml
    mustache dockstore_launcher_config/compose.config templates/essnapshot_backup.sh > scripts/essnapshot_backup.sh
    
    mustache dockstore_launcher_config/compose.config templates/jvm.options.es.template > config/jvm.options.es
    mustache dockstore_launcher_config/compose.config templates/jvm.options.logstash.template > config/jvm.options.logstash
    mustache dockstore_launcher_config/compose.config templates/postgres_backup.sh.template > scripts/postgres_backup.sh
    chmod a+rx scripts/postgres_backup.sh
    # .env file
    mustache dockstore_launcher_config/compose.config templates/env.template > .env

    mkdir -p config/rules
    for f in $(ls templates/rules/); do mustache dockstore_launcher_config/compose.config templates/rules/$f > config/rules/$f; done
}

# Ask the user a question and save the answer.
# They MUST give an answer, they cannot leave their answer blank. In the future, that could be parameterized...
# $1 - the question string
# $2 - the previous value
# $3 - the name of the value
# $4 - reference to the user's answer.
function ask_question()
{
	question_str=$1
	prev_val=$2
	val_name=$3
	answer=''

    while [[ -z ${answer// /} ]] ; do
        if [[ -n $prev_val ]] ; then
			read -ep "${question_str} Previous value: "$'\n' -i "$prev_val" answer
        else
            read -ep "$question_str"$'\n' answer
        fi
        if [[ -z ${answer// /} ]] ; then
            echo "$val_name name cannot be blank."
        fi
    done
    # Set the user's value in the reference. See here: http://stackoverflow.com/a/14852461/192801 to get an idea of how this works.
    eval "${!4}=\"${answer}\""
}

user_dockstore_version=latest
#FYI: The weird "^^" is to make the user input into uppercase so that if they enter "y" the installer will still run.
install_dockstore_launcher=''
while [[ "${install_dockstore_launcher^^}" != 'Y' &&  "${install_dockstore_launcher^^}" != 'N' && "$@" != *"--script"* ]] ; do
	echo "DO YOU WISH TO CONTINUE [Y/N]:"
	read install_dockstore_launcher
	if [ "${install_dockstore_launcher^^}" = 'Y' ] ; then
		user_install_docker=''
		set +e
		DOCKER_PATH="$(which docker)"
		set -e
		if [ -z "$DOCKER_PATH" ] ; then
			user_install_docker='Y'
		else
			while [[ "${user_install_docker^^}" != 'Y' &&  "${user_install_docker^^}" != 'N' ]] ; do
				echo "It looks like docker may already be installed. Would you like to run this step anyway, which may attempt to upgrade docker? [Y/N]"
				read user_install_docker
			done
		fi
                echo "Installing various apt packages"
                # need to install regardless
		set +e
		sudo apt-get install wget curl ruby-mustache=1.0.2-1 jq git --yes &> install_wget_curl.log
		install_wget_result=$?
		set -e

		if [ $install_wget_result -ne  0 ] ; then
			echo "It looks like there may have been a problem installing or updated wget and curl:"
			cat install_wget_curl.log
			exit 1
		fi
		if [ "${user_install_docker^^}" = 'Y' ] ; then
			# Remove eXecute permission from /etc/grub.d/30_os-prober because sometimes the docker installer will hang when this hangs. This has happened in OpenStack
			# and could happen elsewhere.
			if [ -f /etc/grub.d/30_os-prober ] ; then
				sudo chmod a-x /etc/grub.d/30_os-prober
			fi

			echo "Installing docker..."


			set +e
			curl -sSL https://get.docker.com/ | sh &> install_docker.log
			install_docker_result=$?
			set -e

			if [ ${install_docker_result} -ne  0 ] ; then
				echo "It looks like there may have been a problem installing docker:"
				cat install_wget_curl.log
				exit 1
			fi

			set +e
			sudo wget https://github.com/docker/compose/releases/download/1.8.1/run.sh -O /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose  &> install_compose.log
			install_compose_result=$?
			set -e

			if [ ${install_compose_result} -ne  0 ] ; then
				echo "It looks like there may have been a problem installing docker compose:"
				cat install_compose.log
				exit 1
			fi



			echo "Done installing docker!"
			DOCKER_PATH="$(which docker)"
		else
			echo "Skipping docker installation..."
		fi

		if [ -z "$DOCKER_PATH" ] ; then
			echo "You need to install docker before pulling docker images. Please ensure that docker is properly installed and then re-run this script with the command \"bash install_bootstrap\""
			exit 1
		fi
	elif [ "${install_dockstore_launcher^^}" = 'N' ] ; then
		echo "You are exiting the installer now, but you can always run it again when you are ready."
		exit 0
	fi
done

#Read the config file if it exists and then show previous values (but do not override variables in this script)
if [ -f dockstore_launcher_config/compose.config ] ; then
    source <(jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" dockstore_launcher_config/compose.config | grep -v "CONSONANCE")
fi

while [[ "${run_dockstore_launcher^^}" != 'Y' &&  "${run_dockstore_launcher^^}" != 'N' && "$@" != *"--script"* ]] ; do
    echo "Would you like to run the dockstore_launcher now? [Y/N]"
    read run_dockstore_launcher
    # If the user would like to run dockstore_launcher, then we have to get some config settings from them OR read them from an existing file
    if [ "${run_dockstore_launcher^^}" = 'Y' ] ; then
	production='production'
	ask_question "Are you deploying on production (true or false)?" "$PRODUCTION" "Dockstore version" $production
        dockstore_version='dockstore_version'
        ask_question "What version of Dockstore do you wish to deploy?" "$DOCKSTORE_VERSION" "Dockstore version" $dockstore_version

        dockstore_ui2_version='dockstore_ui2_version'
        ask_question "What version of Dockstore UI 2 do you wish to deploy?" "$DOCKSTORE_UI2_VERSION" "Dockstore version" $dockstore_ui2_version

        github_client2_id='github_client2_id'
        ask_question "What is your github client id for UI2?" "$GITHUB_CLIENT2_ID" "Dockstore version" $github_client2_id
        github_client2_secret='github_client2_secret'
        ask_question "What is your github client secret for UI2?" "$GITHUB_CLIENT2_SECRET" "Dockstore version" $github_client2_secret

        quay_client_id='quay_client_id'
        ask_question "What is your quay client id?" "$QUAY_CLIENT_ID" "Dockstore version" $quay_client_id
        quay_client_secret='quay_client_secret'
        ask_question "What is your quay client secret?" "$QUAY_CLIENT_SECRET" "Dockstore version" $quay_client_secret

        bitbucket_client_id='bitbucket_client_id'
        ask_question "What is your bitbucket client id?" "$BITBUCKET_CLIENT_ID" "Dockstore version" $bitbucket_client_id
        bitbucket_client_secret='bitbucket_client_secret'
        ask_question "What is your bitbucket client secret?" "$BITBUCKET_CLIENT_SECRET" "Dockstore version" $bitbucket_client_secret

        gitlab_client_id='gitlab_client_id'
        ask_question "What is your gitlab client id?" "$GITLAB_CLIENT_ID" "Dockstore version" $gitlab_client_id
        gitlab_client_secret='gitlab_client_secret'
        ask_question "What is your gitlab client secret?" "$GITLAB_CLIENT_SECRET" "Dockstore version" $gitlab_client_secret

        google_client_id='google_client_id'
        ask_question "What is your google client id?" "$GOOGLE_CLIENT_ID" "Dockstore version" $google_client_id
        google_client_secret='google_client_secret'
        ask_question "What is your google client secret?" "$GOOGLE_CLIENT_SECRET" "Dockstore version" $google_client_secret

        domain_name='domain_name'
        ask_question "What is the webservice domain name for this server?" "$DOMAIN_NAME" "Domain name" $domain_name
        external_domain_name='external_domain_name'
	ask_question "What is the external domain name for this site (this is what a user would use in a web browser)?" "$EXTERNAL_DOMAIN_NAME" "External domain name" $external_domain_name
        https='https'
        ask_question "Are you using https (true or false)?" "$HTTPS" "https" $https

        discourse_url='discourse_url'
        ask_question "What is your Discourse URL (ends with a /)?" "$DISCOURSE_URL" "discourse_url" $discourse_url
        discourse_key='discourse_key'
        ask_question "What is your Discourse key?" "$DISCOURSE_KEY" "discourse_key" $discourse_key
        discourse_category_id='discourse_category_id'
        ask_question "What is your Discourse category id (9 for staging, 6 for production)?" "$DISCOURSE_CATEGORY_ID" "discourse_category_id" $discourse_category_id

        zenodo_client_id='zenodo_client_id'
        ask_question "What is your zenodo client id?" "$ZENODO_CLIENT_ID" "zenodo_client_id" $zenodo_client_id
        zenodo_client_secret='zenodo_client_secret'
        ask_question "What is your zenodo client secret?" "$ZENODO_CLIENT_SECRET" "zenodo_client_secret" $zenodo_client_secret
        zenodo_url='zenodo_url'
	ask_question "What is the zenodo url (https://sandbox.zenodo.org for staging, https://zenodo.org for production)?" "$ZENODO_URL" "zenodo_url" $zenodo_url

        tooltester_bucket_name='tooltester_bucket_name'
        ask_question "What is the name of the bucket holding tooltester logs?" "$TOOLTESTER_BUCKET_NAME" "tooltester_bucket_name" $tooltester_bucket_name

        github_app_private_key_file='github_app_private_key_file'
        ask_question "What is the absolute path to the private key file?" "$GITHUB_APP_PRIVATE_KEY_FILE" "github_app_private_key_file" $github_app_private_key_file
        github_app_id='github_app_id'
        ask_question "What is the id of the GitHub App?" "$GITHUB_APP_ID" "github_app_id" $github_app_id
        github_app_name='github_app_name'
        ask_question "What is the name of the GitHub App?" "$GITHUB_APP_NAME" "github_app_name" $github_app_name


        tag_manager_id='tag_manager_id'
        ask_question "What is your Google tag manager id?" "$TAG_MANAGER_ID" "tag_manager_id" $tag_manager_id

        logstash='logstash'
        ask_question "Are you using logstash (true or false)?" "$LOGSTASH" "logstash" $logstash

        logstash_host='logstash_host'
        ask_question "If you are using logstash, where is it hosted (ex: logstash)?" "$LOGSTASH_HOST" "logstash_host" $logstash_host

        terra_import_url='terra_import_url'
        ask_question "What is the Launch with Terra base url? For prod it should be https://app.terra.bio/#import-tool/dockstore; for staging it should be https://bvdp-saturn-dev.appspot.com/#import-tool/dockstore" "$TERRA_IMPORT_URL" "terra_import_url" $terra_import_url

        authorizer_type='authorizer_type'
        ask_question "What kind of authorizer should we use? (sam, or inmemory)" "$AUTHORIZER_TYPE" "authorizer_type" $authorizer_type

        external_google_client_prefix1='external_google_client_prefix1'
        ask_question "What are the prefixes for google tokens we should accept?" "$EXTERNAL_GOOGLE_CLIENT_PREFIX1" "external_google_client_prefix1" $external_google_client_prefix1

        sam_path='sam_path'
        ask_question "What is the path for the sam instance you wish to point at?" "$SAM_PATH" "sam_path" $sam_path

        slack_url='slack_url'
        ask_question "What is the slack URL for notifications?" "$SLACK_URL" "slack_url" $slack_url

        database_generated='database_generated'
        ask_question "Do you want to run migration assuming a generated database as opposed to a production DB (true or false)?" "$DATABASE_GENERATED" "database_generated" $database_generated

        # Now write a config for this file.
        [[ -f dockstore_launcher_config/compose.config ]] || mkdir -p dockstore_launcher_config
               # Note: You can't have ANY blank lines in .dockstore/dockstore.config because the python library that will eventually process it does not like blank lines and will fail.
        # we need to override the ethernet device on some systems

                echo "Installing various apt packages"
        cat > dockstore_launcher_config/compose.config <<CONFIG
{
"PUBLIC_LAUNCHER_IP_ADDRESS":"`curl http://169.254.169.254/latest/meta-data/public-ipv4`",
"PRODUCTION":${production},
"DOCKSTORE_VERSION":"${dockstore_version}",
"DOCKSTORE_UI2_VERSION":"${dockstore_ui2_version}",
"GITHUB_CLIENT2_ID":"${github_client2_id}",
"GITHUB_CLIENT2_SECRET":"${github_client2_secret}",
"QUAY_CLIENT_ID":"${quay_client_id}",
"QUAY_CLIENT_SECRET":"${quay_client_secret}",
"BITBUCKET_CLIENT_ID":"${bitbucket_client_id}",
"BITBUCKET_CLIENT_SECRET":"${bitbucket_client_secret}",
"DOMAIN_NAME":"${domain_name}",
"EXTERNAL_DOMAIN_NAME":"${external_domain_name}",
"HTTPS":${https},
"DISCOURSE_URL":"${discourse_url}",
"DISCOURSE_KEY":"${discourse_key}",
"DISCOURSE_CATEGORY_ID":"${discourse_category_id}",
"GITHUB_APP_PRIVATE_KEY_FILE": "${github_app_private_key_file}",
"GITHUB_APP_ID": "${github_app_id}",
"GITHUB_APP_NAME": "${github_app_name}",
"TOOLTESTER_BUCKET_NAME": "${tooltester_bucket_name}",
"TAG_MANAGER_ID":"${tag_manager_id}",
"GITLAB_CLIENT_ID":"${gitlab_client_id}",
"GITLAB_CLIENT_SECRET":"${gitlab_client_secret}",
"GOOGLE_CLIENT_ID":"${google_client_id}",
"GOOGLE_CLIENT_SECRET":"${google_client_secret}",
"LOGSTASH":${logstash},
"LOGSTASH_HOST":"${logstash_host}",
"TERRA_IMPORT_URL":"${terra_import_url}",
"AUTHORIZER_TYPE":"${authorizer_type}",
"EXTERNAL_GOOGLE_CLIENT_PREFIX1":"${external_google_client_prefix1}",
"SAM_PATH":"${sam_path}",
"DATABASE_GENERATED":${database_generated},
"ZENODO_CLIENT_ID":"${zenodo_client_id}",
"ZENODO_CLIENT_SECRET":"${zenodo_client_secret}",
"ZENODO_URL":"${zenodo_url}",
"SLACK_URL":"${slack_url}"
}
CONFIG
    elif [ "${run_dockstore_launcher^^}" = 'N' ] ; then
        echo "You can run this script at another time to run the dockstore launcher"
        exit 0
    fi
done

template

docker-compose build

echo "Exiting now."
